import java.util.*;

class Solution {
    public static boolean[] visited;
    
    public int solution(String begin, String target, String[] words) {
        int answer = 0;

		if (!canFind(target, words))
			return 0;

		visited = new boolean[words.length];

		return answer = changeWord(begin, target, words);
	}
	
	public static int cntDiffer(String word, String spell) {
		int cnt = 0;
		
		for (int i = 0; i < word.length(); i++) {
			if (word.charAt(i) != spell.charAt(i))
				cnt++;
		}
		
		return cnt;
	}

	public static int changeWord(String begin, String target, String[] words) {
		int answer = 0;
		Queue<Word> q = new LinkedList<>();
		q.add(new Word(0, begin));

		while (!q.isEmpty()) {
			Word now = q.poll();
			answer = now.depth;
			
			if (now.spell.equals(target))
				return answer;

			for (int i = 0; i < words.length; i++) {
				if (cntDiffer(words[i], now.spell) != 1)
					continue;
				
				if (!visited[i]) {
					q.add(new Word(now.depth + 1, words[i]));
					visited[i] = true;
				}
			}
		}

		return answer;
	}

	public static boolean canFind(String target, String[] words) {
		for (String word : words) {
			if (target.equals(word))
				return true;
		}

		return false;
	}

}

class Word {
	int depth;
	String spell;

	public Word(int depth, String spell) {
		this.depth = depth;
		this.spell = spell;
	}
}
